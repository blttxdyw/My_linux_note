shell脚本
	是一种解释性的语言
	是shell命令的有序集合


shell 编程的基本步骤
	1.建立shell文件 .sh结尾
	2.赋予shell文件执行权限   使用chmod修改权限
	3.执行shell文件  使用命令号直接执行 
			1.	./file_name
			2.指定路径或者修改环境变量PATH后执行shell程序

			PATH:执行命令的搜索路径

shell变量

	1.用户自定义变量
		var=value
		没有类型,所有赋值给变量的值都解释为遗传字符

		count=1 	  #等号两边不能加空格
		ehco $count   #打印变量加$


	2.位置变量 即命令行参数
		位置参数变量

		执行脚本时获取命令参数信息

		基本语法

		$n  $0代表命令本身 $1-$9代表顺序参数编号 大于10的话使用括号 如${10}

		$* 把所有参数当作整体

		$@ 所有参数

		$# 所有参数的个数

		echo "$0 $1 $2" #命令为 ./myShell.sh 10 20 则本行输出./myShell.sh 10 20 
		echo "$*" #10 20
		echo "$@" #10 20
		echo "$#" #参数个数为2


	3.预定义变量


	4.环境变量
		PATH 
		HISTSIZE....



shell语句
	1.说明性语句
		#开头   注释

	2.功能性语句
		任意的shell命令  程序

		(1)
			/bin/bash  -n   表示不换行
			/bin/sh    -c   表示不换行

		(2)
			expr命令  主要用于加(+),减(-),乘(\*),除(/),求模(%),
			expr 3  + 4 \* 5 = 23	注意:运算符两边一定要加空格
			A=$(expr 3  + 4 \* 5)   命令置换的两种方式是 $(command)  'command'

		(3)
			test语句:
				可测试三种对象:	字符串  文件属性  整数
				每种测试对象都有若干测试操作符
					1.	test "$answer" = "yes"  测试字符串answer的值是否为yes

					2. 	test $num -eq	18		测试变量的值是否为整数18

					3.	test -d tmp		测试tmp是否是一个目录名

					$?  表示的意义?
						最后运行的命令的结束代码（返回值）即执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)
	
	3.结构性语句
		条件测试语句  多路分支语句  循环语句  循环控制语句等

		(1)条件语句
			if  表达式
				then  命令表
			fi

		(2)case 语句

		(3)循环语句
			for 变量名  in 单词表
				do 
					命令表
				done

			seq 命令: seq 1 2 10 --> 1 3 5 7 9

		（4）break continue


	4.函数
		在shell 中有两种定义函数的语法格式，分别为：

        		函数名()
       		    {
         			 命令序列
          		}

      		 或者
       		 function 函数名()     /function 可以不写
        		 {
         			 命令序列
          		}


		
